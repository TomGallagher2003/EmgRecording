{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EMG/EEG Recording Docs","text":"<p>Welcome! Use the sidebar to navigate.</p>"},{"location":"#quick-links","title":"Quick links","text":"<ul> <li>API Reference</li> </ul>"},{"location":"api/config/","title":"Configuration","text":""},{"location":"api/config/#config.Config","title":"<code>config.Config</code>","text":"<p>Experiment/runtime configuration for EMG/EEG acquisition.</p> <p>This class captures device enable flags, channel layouts, sample rate, IP/port for the SyncStation, gain mode settings, filesystem paths, and derived indices (e.g., which channels map to EMG, EEG, AUX, and counters).</p> <p>Attributes:</p> Name Type Description <code>USE_EMG</code> <code>bool</code> <p>Enable EMG device/channels.</p> <code>USE_EEG</code> <code>bool</code> <p>Enable EEG device/channels.</p> <code>SAVE_COUNTERS</code> <code>bool</code> <p>Save SyncStation/Muovi counter channels.</p> <code>SAVE_H5</code> <code>bool</code> <p>Save HDF5 outputs in addition to CSV (if applicable).</p> <code>EMG_MODE</code> <code>int</code> <p>EMG gain mode (0 \u2192 gain 8, 1 \u2192 gain 4; 2/3 test).</p> <code>EEG_MODE</code> <code>int</code> <p>EEG gain mode (same encoding as EMG_MODE).</p> <code>GAIN_RATIOS</code> <code>dict[int, float]</code> <p>Mode\u2192volts-per-count scale factors.</p> <code>DEVICE_EN</code> <code>list[int]</code> <p>Per-device enable mask (1=on, 0=off); EMG at index 0, EEG at index 4 (others reserved).</p> <code>EMG</code> <code>list[int]</code> <p>Per-channel enable mask for EMG device group.</p> <code>MODE</code> <code>list[int]</code> <p>Per-device mode values; EMG_MODE at index 0, EEG_MODE at index 4 (others reserved).</p> <code>TCP_PORT</code> <code>int</code> <p>SyncStation TCP port.</p> <code>IP_ADDRESS</code> <code>str</code> <p>SyncStation IP address.</p> <code>SAMPLE_FREQUENCY</code> <code>int</code> <p>Sampling rate in Hz for EMG/EEG streams.</p> <code>OFFSET_EMG</code> <code>int</code> <p>Optional EMG DC offset correction (counts).</p> <code>PLOT_TIME</code> <code>int</code> <p>Default window length for plotting (seconds).</p> <code>DATA_DESTINATION_PATH</code> <code>str</code> <p>Directory for signal outputs.</p> <code>LABEL_DESTINATION_PATH</code> <code>str</code> <p>Directory for label files.</p> <code>IMAGE_SOURCE_PATH</code> <code>str</code> <p>Directory for movement cue images.</p> <code>NUM_CHAN</code> <code>list[int]</code> <p>Bytes-per-device channel counts in stream order.</p> <code>MUOVI_EMG_CHANNELS</code> <code>list[int]</code> <p>Index range of EMG channels.</p> <code>MUOVI_AUX_CHANNELS</code> <code>list[int]</code> <p>Index range of EMG AUX channels.</p> <code>MUOVI_PLUS_EEG_CHANNELS</code> <code>list[int]</code> <p>Index range of EEG channels.</p> <code>MUOVI_PLUS_AUX_CHANNELS</code> <code>list[int]</code> <p>Index range of EEG AUX channels.</p> <code>SYNCSTATION_CHANNELS</code> <code>list[int]</code> <p>Index range of SyncStation channels.</p> <code>SYNCSTATION_COUNTER_CHANNEL</code> <code>int</code> <p>SyncStation counter channel index.</p> <code>MUOVI_COUNTER_CHANNEL</code> <code>int</code> <p>EMG-device counter channel index.</p> <code>MUOVI_PLUS_COUNTER_CHANNEL</code> <code>int</code> <p>EEG-device counter channel index.</p>"},{"location":"api/config/#config.Config.__init__","title":"<code>__init__(use_emg, use_eeg)</code>","text":"<p>Initialize configuration with chosen devices and derive channel maps.</p> <p>Parameters:</p> Name Type Description Default <code>use_emg</code> <code>bool</code> <p>Whether to enable EMG acquisition.</p> required <code>use_eeg</code> <code>bool</code> <p>Whether to enable EEG acquisition.</p> required Notes <ul> <li><code>DEVICE_EN</code>, <code>EMG</code>, and <code>MODE</code> arrays are structured for the   underlying firmware protocol: EMG settings are at index 0,   EEG settings at index 4. Other indices are reserved.</li> <li>Channel index lists (e.g., <code>MUOVI_EMG_CHANNELS</code>) are computed   in stream order, expanding as devices are enabled so that   EMG, EEG, AUX, and SyncStation ranges are contiguous and   consistent with the decoder.</li> </ul>"},{"location":"api/plotting/","title":"Plotting","text":""},{"location":"api/plotting/#view_csv","title":"<code>view_csv</code>","text":"<p>Simple plotting utilities for EMG/EEG CSV files.</p> <p>Provides helpers to visualize one or more channels from a comma-separated signal file. If the filename begins with 'eeg', values are treated as microvolts (\u00b5V) and scaled accordingly. Multi-channel plots normalize Y-limits using the <code>AMPLITUDE_IN_MILLIVOLTS</code> setting (mV by default).</p>"},{"location":"api/plotting/#view_csv.plot_file","title":"<code>plot_file(file_path, channel_list=[])</code>","text":"<p>Plot multiple channels from a CSV signal file in stacked subplots.</p> <p>Loads the CSV at <code>file_path</code>, transposes to (channels, samples), optionally selects a subset of channels, applies EEG microvolt scaling if the filename starts with 'eeg', and renders each channel on its own axis with shared X.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str | Path</code> <p>Path to the CSV file (channels in columns or rows; function transposes to channel-major).</p> required <code>channel_list</code> <code>Iterable[int]</code> <p>Zero-based indices of channels to include. If empty, all channels are plotted.</p> <code>[]</code> Notes <ul> <li>When <code>MICRO_VOLTS</code> is True (filename starts with 'eeg'), data is multiplied   by 1e3 to convert mV\u2192\u00b5V for display.</li> <li>The Y-range of each subplot is clamped to \u00b1<code>AMPLITUDE_IN_MILLIVOLTS</code>   (interpreted as mV or \u00b5V depending on mode).</li> </ul>"},{"location":"api/plotting/#view_csv.plot_channel","title":"<code>plot_channel(file_path, channel=1)</code>","text":"<p>Plot a single channel from a CSV signal file.</p> <p>Loads and transposes the CSV at <code>file_path</code>, applies unit heuristics, and plots the specified 1-based <code>channel</code>. If the maximum value across channels 6\u201320 (1-based) is &gt; 500, the Y-label is set to 'raw input'; otherwise: - If EEG filename (starts with 'eeg'), data is scaled to \u00b5V and label '\u00b5V' - Else label defaults to 'mV'</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str | Path</code> <p>Path to the CSV file.</p> required <code>channel</code> <code>int, default=1</code> <p>1-based channel index to visualize.</p> <code>1</code> Notes <ul> <li>Uses simple heuristics to choose the unit label; adjust for your pipeline   if raw counts vs. calibrated units differ.</li> </ul>"},{"location":"api/recording/","title":"Recording","text":""},{"location":"api/recording/#recording.Session","title":"<code>recording.Session</code>","text":"<p>Manage a recording session for EMG/EEG data acquisition.</p> <p>This class encapsulates configuration validation, SyncStation communication, streaming/collection of raw bytes, alignment (with or without EEG counters), decoding into channel-wise arrays, and saving labeled segments.</p> <p>Attributes:</p> Name Type Description <code>config</code> <code>Config</code> <p>Runtime configuration (devices, channels, sample rate, paths).</p> <code>socket_handler</code> <code>SocketHandler</code> <p>TCP socket wrapper for the SyncStation/device.</p> <code>conf_string</code> <code>list[int] | None</code> <p>Mutable configuration command buffer (bytes-as-ints).</p> <code>tot_num_byte</code> <code>int | None</code> <p>Bytes per frame (all enabled channels in one frame).</p> <code>tot_num_chan</code> <code>int | None</code> <p>Number of enabled channels in the stream.</p> <code>recording</code> <code>bool</code> <p>True while actively receiving bytes for a segment.</p> <code>emg_channels</code> <code>list[int] | None</code> <p>Indices of EMG channels within the frame.</p> <code>id</code> <code>int</code> <p>Subject/session identifier used in file names.</p> <code>dateString</code> <code>str</code> <p>Short date string (dd-mm) used in file naming.</p> <code>ind</code> <code>int</code> <p>Internal counter for segments recorded in this process.</p>"},{"location":"api/recording/#recording.Session.__init__","title":"<code>__init__(use_emg, use_eeg)</code>","text":"<p>Initialize a recording session and connect to the device.</p> <p>Parameters:</p> Name Type Description Default <code>use_emg</code> <code>bool</code> <p>Whether EMG channels are enabled.</p> required <code>use_eeg</code> <code>bool</code> <p>Whether EEG channels are enabled.</p> required"},{"location":"api/recording/#recording.Session.start","title":"<code>start()</code>","text":"<p>Validate and send the start/configuration command to the device.</p> <p>Validates <code>DEVICE_EN</code>, <code>EMG</code>, and <code>MODE</code>, computes the packed configuration with <code>process_config</code>, and sends it over the socket. Populates: <code>conf_string</code>, <code>emg_channels</code>, <code>tot_num_chan</code>, <code>tot_num_byte</code>.</p>"},{"location":"api/recording/#recording.Session.finish","title":"<code>finish()</code>","text":"<p>Send a stop command and close the socket.</p> <p>Mutates the configuration header to craft a stop command, sends it, and closes the TCP connection.</p>"},{"location":"api/recording/#recording.Session.emg_recording","title":"<code>emg_recording(perform_time, rest_time, movement, rep)</code>","text":"<p>Record one movement + following rest segment for EMG.</p> <p>Parameters:</p> Name Type Description Default <code>perform_time</code> <code>float</code> <p>Duration of the movement in seconds.</p> required <code>rest_time</code> <code>float</code> <p>Rest duration immediately after the movement in seconds.</p> required <code>movement</code> <code>int</code> <p>Movement label/index (used for file naming and labels).</p> required <code>rep</code> <code>int</code> <p>Repetition number (used for file naming).</p> required"},{"location":"api/recording/#recording.Session.record_initial_rest","title":"<code>record_initial_rest(rest_time, movement, perform_time)</code>","text":"<p>Record the initial rest period before a movement.</p> <p>Parameters:</p> Name Type Description Default <code>rest_time</code> <code>float</code> <p>Rest duration in seconds.</p> required <code>movement</code> <code>int</code> <p>Movement label/index (used in labels and naming).</p> required <code>perform_time</code> <code>float</code> <p>Planned movement duration (for label sizing).</p> required"},{"location":"api/recording/#recording.Session.record","title":"<code>record(is_movement, rest_time, movement, perform_time=0, rep=None)</code>","text":"<p>Record a single segment (movement or rest), align, decode, and save.</p> <p>Streams raw bytes for <code>rec_time</code>, aligns frames (EEG-aware if enabled), reshapes to frames, decodes to channel arrays, builds movement/rest labels, and saves EMG/EEG/counter channels according to config.</p> <p>Parameters:</p> Name Type Description Default <code>is_movement</code> <code>bool</code> <p>If True, records <code>perform_time + rest_time</code>; else only rest.</p> required <code>rest_time</code> <code>float</code> <p>Rest duration in seconds.</p> required <code>movement</code> <code>int</code> <p>Movement label/index.</p> required <code>perform_time</code> <code>float</code> <p>Movement duration in seconds. Defaults to 0.</p> <code>0</code> <code>rep</code> <code>int | None</code> <p>Repetition index for naming when <code>is_movement=True</code>.</p> <code>None</code> Notes <ul> <li>Uses <code>SAMPLE_TOLERANCE</code> to accept minor sample count drift.</li> <li>Uses <code>simple_alignment</code> when EEG is not enabled; otherwise no offset trim here.</li> </ul>"},{"location":"api/recording/#recording.Session.receive_and_ignore","title":"<code>receive_and_ignore(duration, no_print=False)</code>","text":"<p>Passively read and discard incoming bytes for a duration.</p> <p>Useful for flushing the socket or letting the device stream while the UI prepares, without recording.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>float</code> <p>Seconds to continue ignoring data.</p> required <code>no_print</code> <code>bool</code> <p>Suppress the default 'Ignoring' print if True.</p> <code>False</code>"},{"location":"api/recording/#recording.Session.set_id","title":"<code>set_id(new_id)</code>","text":"<p>Set the current subject/session identifier.</p> <p>Parameters:</p> Name Type Description Default <code>new_id</code> <code>int</code> <p>Identifier to embed in output file paths.</p> required"},{"location":"api/recording/#recording.Session.make_directory","title":"<code>make_directory()</code>","text":"<p>Ensure the base data destination directory exists.</p>"},{"location":"api/recording/#recording.Session.make_subject_directory","title":"<code>make_subject_directory(subject_id, exercise_set)</code>","text":"<p>Create (if needed) the subject directory tree for an exercise set.</p> <p>Parameters:</p> Name Type Description Default <code>subject_id</code> <code>int | str</code> <p>Subject identifier used in the folder structure.</p> required <code>exercise_set</code> <code>str</code> <p>Exercise set label (e.g., 'EA' or 'EB').</p> required"},{"location":"api/recording/#recording.Session.save_channels","title":"<code>save_channels(data, labels, type_string, perform_time, exercise_group, suffix)</code>","text":"<p>Persist a set of channels plus labels to disk.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray</code> <p>Channel-major array to save (shape: [n_channels, n_samples]).</p> required <code>labels</code> <code>ndarray</code> <p>1D label array per-sample for movement/rest.</p> required <code>type_string</code> <code>str</code> <p>Type key ('emg', 'eeg', or 'counters').</p> required <code>perform_time</code> <code>float</code> <p>Movement duration used in naming/metadata.</p> required <code>exercise_group</code> <code>str</code> <p>Exercise set/group label, e.g., 'EA'/'EB'.</p> required <code>suffix</code> <code>str</code> <p>File suffix encoding movement/rep or rest segment.</p> required"},{"location":"api/recording/#recording.Session.get_record","title":"<code>get_record(rec_time)</code>","text":"<p>Capture a raw segment for <code>rec_time</code> seconds and return decoded channels. Used to make sure there is nonzero data for each device.</p> <p>Streams bytes for the specified duration, aligns frames (EEG-aware if enabled), decodes into channel arrays, and returns the numeric data.</p> <p>Parameters:</p> Name Type Description Default <code>rec_time</code> <code>float</code> <p>Segment duration in seconds.</p> required <p>Returns:</p> Type Description <p>np.ndarray: Array of shape [n_channels, n_samples] for the captured segment.</p>"},{"location":"api/util/channel_alignment/","title":"Channel Alignment","text":""},{"location":"api/util/channel_alignment/#util.channel_alignment","title":"<code>util.channel_alignment</code>","text":"<p>Channel alignment utility for EMG-only frames.</p> <p>Provides a heuristic to locate the sample-counter channel in recent frames and compute the byte offset needed to align frame boundaries in a raw byte buffer from the Muovi/SyncStation stream.</p>"},{"location":"api/util/channel_alignment/#util.channel_alignment.simple_alignment","title":"<code>simple_alignment(data_buffer)</code>","text":"<p>Estimate frame alignment offset from the tail of a byte buffer.</p> <p>Takes the last 10 frames (assumed 88 bytes per frame for EMG-only) and decodes EMG + auxiliary channels to locate a monotonically increasing sample-counter channel. Returns the number of bytes to trim from the end so that the buffer ends at a frame boundary.</p> <p>Parameters:</p> Name Type Description Default <code>data_buffer</code> <code>bytes | bytearray | memoryview</code> <p>Raw incoming byte buffer.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>Byte offset to drop from the end of <code>data_buffer</code> (0 if not found).</p> Notes <ul> <li>Assumes 16-bit EMG samples (2 bytes) and 6 auxiliary channels at the   end of each 88-byte frame.</li> <li>Detects a counter by checking consecutive +1 increments across the   first three samples; uses a second channel (+6) to disambiguate.</li> </ul>"},{"location":"api/util/data_validation/","title":"Data Validation","text":""},{"location":"api/util/data_validation/#util.data_validation","title":"<code>util.data_validation</code>","text":"<p>Validation utilities for checking EMG/EEG data streams.</p> <p>Provides simple functions to confirm that active channels from EMG and EEG devices contain non-zero values, ensuring that the hardware is connected and streaming before starting a session.</p>"},{"location":"api/util/data_validation/#util.data_validation.validate_data","title":"<code>validate_data(data, use_emg, use_eeg)</code>","text":"<p>Check whether EMG/EEG data arrays contain valid (non-zero) samples.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray</code> <p>2D array of channel data, shaped (num_channels, num_samples).</p> required <code>use_emg</code> <code>bool</code> <p>Whether EMG device(s) are enabled.</p> required <code>use_eeg</code> <code>bool</code> <p>Whether EEG device(s) are enabled.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if all enabled devices provide non-zero data on their first channel,</p> <p>False otherwise.</p> Notes <ul> <li>Uses the channel indices defined in <code>Config</code> to locate EMG and EEG streams.</li> <li>Prints a confirmation message when valid data is found.</li> </ul>"},{"location":"api/util/data_validation/#util.data_validation.zero_check","title":"<code>zero_check(channel)</code>","text":"<p>Return True if a channel contains at least one non-zero sample.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>Iterable[int | float]</code> <p>Sequence of samples for a single channel.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if any sample is non-zero, False if all samples are zero.</p>"},{"location":"api/util/file_pathing/","title":"File Pathing","text":""},{"location":"api/util/file_pathing/#util.file_pathing","title":"<code>util.file_pathing</code>","text":"<p>File I/O utilities for saving EMG/EEG session data.</p> <p>This module provides functions to: - Create subject-specific directory structures for storing recordings. - Save channel data and labels into both CSV and HDF5 formats,   organized by subject, data type, and exercise set.</p> <p>Directories are created automatically if they do not already exist.</p>"},{"location":"api/util/file_pathing/#util.file_pathing.make_subject_directory","title":"<code>make_subject_directory(base_path, subject_id, exercise_set, use_emg=True, use_eeg=True, save_counters=True)</code>","text":"<p>Create subject folder structure for recordings.</p> <p>Parameters:</p> Name Type Description Default <code>base_path</code> <code>str or Path</code> <p>Root directory where data is stored.</p> required <code>subject_id</code> <code>str or int</code> <p>Subject identifier (used as folder name).</p> required <code>exercise_set</code> <code>str</code> <p>Exercise set indicator (\"A\", \"B\", or \"AB\").</p> required <code>use_emg</code> <code>bool</code> <p>If True, create EMG directories. Defaults to True.</p> <code>True</code> <code>use_eeg</code> <code>bool</code> <p>If True, create EEG directories. Defaults to True.</p> <code>True</code> <code>save_counters</code> <code>bool</code> <p>If True, create counters directories. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>Path to the created subject directory.</p> Directory Layout <p>//     emg/EA/{csv,hdf5}/     emg/EB/{csv,hdf5}/     eeg/EA/{csv,hdf5}/     eeg/EB/{csv,hdf5}/     counters/EA/{csv,hdf5}/     counters/EB/{csv,hdf5}/"},{"location":"api/util/file_pathing/#util.file_pathing.save_channels","title":"<code>save_channels(base_path, subject_id, type_string, group, perform_time, suffix, data, labels, save_h5=True, date_str=None)</code>","text":"<p>Save EMG/EEG/counter channel data and labels to disk.</p> <p>Parameters:</p> Name Type Description Default <code>base_path</code> <code>str or Path</code> <p>Root directory where subject data is stored.</p> required <code>subject_id</code> <code>str or int</code> <p>Subject identifier.</p> required <code>type_string</code> <code>str</code> <p>Data type (\"emg\", \"eeg\", or \"counters\").</p> required <code>group</code> <code>str</code> <p>Exercise group (\"EA\" or \"EB\").</p> required <code>perform_time</code> <code>float</code> <p>Duration of the movement in seconds.</p> required <code>suffix</code> <code>str</code> <p>Suffix string for distinguishing recordings.</p> required <code>data</code> <code>ndarray</code> <p>2D array of recorded data (channels x samples).</p> required <code>labels</code> <code>ndarray</code> <p>2D array of corresponding labels.</p> required <code>save_h5</code> <code>bool</code> <p>If True, also save HDF5 file. Defaults to True.</p> <code>True</code> <code>date_str</code> <code>str</code> <p>Date string for filenames. If None, uses today\u2019s date (dd-mm).</p> <code>None</code> Saves <ul> <li>CSV files for data and labels.</li> <li>Optional HDF5 file with datasets \"_data\" and \"_label\". <p>Filenames include the date, perform time in ms, and provided suffix.</p>"},{"location":"api/util/filters/","title":"Filters","text":""},{"location":"api/util/filters/#util.filters","title":"<code>util.filters</code>","text":"<p>Signal filtering utilities for EMG/EEG data.</p> <p>This module provides reusable Butterworth filters for high-pass, low-pass, band-pass, and band-stop filtering, along with a preprocessing pipeline tailored for EEG signals that applies a high-pass, notch filters to remove line noise, and a low-pass cutoff.</p> <p>Default sampling frequency is 500 Hz.</p>"},{"location":"api/util/filters/#util.filters.highpass_filter","title":"<code>highpass_filter(data, cutoff=0.1, order=4, fs=FS)</code>","text":"<p>Apply a Butterworth high-pass filter.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray</code> <p>2D array of signals (channels x samples).</p> required <code>cutoff</code> <code>float</code> <p>Cutoff frequency in Hz. Defaults to 0.1.</p> <code>0.1</code> <code>order</code> <code>int</code> <p>Filter order. Defaults to 4.</p> <code>4</code> <code>fs</code> <code>float</code> <p>Sampling frequency in Hz. Defaults to FS.</p> <code>FS</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: Filtered signals.</p>"},{"location":"api/util/filters/#util.filters.lowpass_filter","title":"<code>lowpass_filter(data, cutoff, order=4, fs=FS)</code>","text":"<p>Apply a Butterworth low-pass filter.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray</code> <p>2D array of signals (channels x samples).</p> required <code>cutoff</code> <code>float</code> <p>Cutoff frequency in Hz.</p> required <code>order</code> <code>int</code> <p>Filter order. Defaults to 4.</p> <code>4</code> <code>fs</code> <code>float</code> <p>Sampling frequency in Hz. Defaults to FS.</p> <code>FS</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: Filtered signals.</p>"},{"location":"api/util/filters/#util.filters.bandpass_filter","title":"<code>bandpass_filter(data, low, high, order=4, fs=FS)</code>","text":"<p>Apply a Butterworth band-pass filter.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray</code> <p>2D array of signals (channels x samples).</p> required <code>low</code> <code>float</code> <p>Low cutoff frequency in Hz.</p> required <code>high</code> <code>float</code> <p>High cutoff frequency in Hz.</p> required <code>order</code> <code>int</code> <p>Filter order. Defaults to 4.</p> <code>4</code> <code>fs</code> <code>float</code> <p>Sampling frequency in Hz. Defaults to FS.</p> <code>FS</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: Filtered signals.</p>"},{"location":"api/util/filters/#util.filters.bandstop_filter","title":"<code>bandstop_filter(data, low, high, order=2, fs=FS)</code>","text":"<p>Apply a Butterworth band-stop (notch) filter.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray</code> <p>2D array of signals (channels x samples).</p> required <code>low</code> <code>float</code> <p>Low cutoff frequency in Hz.</p> required <code>high</code> <code>float</code> <p>High cutoff frequency in Hz.</p> required <code>order</code> <code>int</code> <p>Filter order. Defaults to 2.</p> <code>2</code> <code>fs</code> <code>float</code> <p>Sampling frequency in Hz. Defaults to FS.</p> <code>FS</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: Filtered signals.</p>"},{"location":"api/util/filters/#util.filters.remove_line_noise","title":"<code>remove_line_noise(data, fs=FS)</code>","text":"<p>Remove line noise at 50 Hz (and optionally 100 Hz) using band-stop filters.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray</code> <p>2D array of signals (channels x samples).</p> required <code>fs</code> <code>float</code> <p>Sampling frequency in Hz. Defaults to FS.</p> <code>FS</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: Filtered signals with line noise attenuated.</p>"},{"location":"api/util/filters/#util.filters.preprocess_eeg","title":"<code>preprocess_eeg(data, fs=FS)</code>","text":"<p>Apply preprocessing pipeline to EEG data.</p> Steps <ol> <li>High-pass filter at 0.3 Hz (2nd order).</li> <li>Band-stop at 50 Hz (line noise).</li> <li>Low-pass filter at 70 Hz (2nd order).</li> </ol> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray</code> <p>2D array of EEG signals (channels x samples).</p> required <code>fs</code> <code>float</code> <p>Sampling frequency in Hz. Defaults to FS.</p> <code>FS</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: Preprocessed EEG signals.</p>"},{"location":"api/util/processing/","title":"Processing","text":""},{"location":"api/util/processing/#util.processing","title":"<code>util.processing</code>","text":"<p>Processing functions for decoding raw EMG/EEG data streams.</p> <p>This module converts raw byte buffers from the Muovi devices into scaled EMG/EEG channel values in millivolts. Handles both EMG and EEG devices, applies two\u2019s complement conversion, scaling by gain ratios, and filtering for EEG signals.</p>"},{"location":"api/util/processing/#util.processing.process","title":"<code>process(config, temp, data, tot_num_byte, chan_ready)</code>","text":"<p>Decode and process raw EMG/EEG bytes into channel data.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Configuration object containing channel maps, gain ratios, device enables, and mode flags.</p> required <code>temp</code> <code>ndarray</code> <p>1D array of raw byte values for one frame.</p> required <code>data</code> <code>ndarray</code> <p>Output 2D array where processed channel values are written.</p> required <code>tot_num_byte</code> <code>int</code> <p>Total number of bytes expected in the frame.</p> required <code>chan_ready</code> <code>int</code> <p>Starting index in <code>data</code> for the next block of processed channels.</p> required <p>Returns:</p> Type Description <p>np.ndarray: Updated <code>data</code> array with processed EMG/EEG and auxiliary channel values.</p> Notes <ul> <li>EMG data are 16-bit samples (2 bytes/channel).</li> <li>EEG data are 24-bit samples (3 bytes/channel).</li> <li>EEG channels are filtered with a 0.3\u201370 Hz bandpass and   50 Hz notch filter via <code>preprocess_eeg</code>.</li> <li>Both EMG and EEG signals are converted to millivolts.</li> </ul>"},{"location":"api/util/socket_handling/","title":"Socket Handling","text":""},{"location":"api/util/socket_handling/#util.socket_handling.SocketHandler","title":"<code>util.socket_handling.SocketHandler</code>","text":"<p>Lightweight wrapper around a TCP socket connection.</p>"},{"location":"api/util/socket_handling/#util.socket_handling.SocketHandler.__init__","title":"<code>__init__(ip, port)</code>","text":"<p>Initialize a socket handler for a given endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>ip</code> <code>str</code> <p>The IP address of the server to connect to.</p> required <code>port</code> <code>int</code> <p>The TCP port number of the server.</p> required"},{"location":"api/util/socket_handling/#util.socket_handling.SocketHandler.connect","title":"<code>connect(retries=5, retry_delay=2)</code>","text":"<p>Establish a socket connection to the configured endpoint.</p> <p>Attempts to connect multiple times with delays in between.</p> <p>Parameters:</p> Name Type Description Default <code>retries</code> <code>int</code> <p>Maximum number of connection attempts. Defaults to 5.</p> <code>5</code> <code>retry_delay</code> <code>int</code> <p>Delay in seconds between retries. Defaults to 2.</p> <code>2</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the connection is successfully established.</p> <p>Raises:</p> Type Description <code>ConnectionError</code> <p>If all connection attempts fail.</p>"},{"location":"api/util/socket_handling/#util.socket_handling.SocketHandler.close","title":"<code>close()</code>","text":"<p>Shut down and close the socket connection.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the socket was closed successfully, False otherwise.</p>"},{"location":"api/util/socket_handling/#util.socket_handling.SocketHandler.send","title":"<code>send(data)</code>","text":"<p>Send data over the socket.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>Raw bytes to send over the connection.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <p>Return value of <code>socket.sendall</code>, or None if an error occurred.</p>"},{"location":"api/util/socket_handling/#util.socket_handling.SocketHandler.receive","title":"<code>receive(size)</code>","text":"<p>Receive data from the socket.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>Maximum number of bytes to read from the socket.</p> required <p>Returns:</p> Type Description <code>bytes | None</code> <p>bytes | None: Received data, or None if an error occurred.</p>"},{"location":"api/util/socket_handling/#util.socket_handling.SocketHandler.flush","title":"<code>flush()</code>","text":"<p>Flush any residual data in the socket buffer.</p> <p>Reads from the socket until no more data is available.</p>"}]}